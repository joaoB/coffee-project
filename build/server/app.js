var _, app, async, bodyParser, errorHandler, express, http, io, log, methodOverride, path, server, socketio, sockets;

_ = require("underscore");

async = require("async");

http = require("http");

express = require("express");

path = require("path");

methodOverride = require("method-override");

bodyParser = require("body-parser");

socketio = require("socket.io");

errorHandler = require("error-handler");

log = require("./lib/log");

app = express();

server = http.createServer(app);

io = socketio.listen(server);

sockets = [];

io.on("connection", function(socket) {
  sockets.push(socket);
  log.info("Socket connected, " + sockets.length + " client(s) active");
  return socket.on("disconnect", function() {
    sockets.splice(sockets.indexOf(socket), 1);
    return log.info("Socket disconnected, " + sockets.length + " client(s) active");
  });
});

app.use(bodyParser.urlencoded({
  extended: true
})).use(bodyParser.json()).use(methodOverride()).use(express["static"](path.resolve(__dirname, "../client")));

app.set("view engine", "jade").set("views", path.resolve(__dirname, "./views")).set("trust proxy", true);

app.get("/", (function(_this) {
  return function(req, res, next) {
    log.info(sockets.length);
    return res.send("Welcome to the coffe project!");
  };
})(this));

server.listen(3000);

log.info("Listening on 3000");

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQTs7QUFBQSxDQUFBLEdBQWlCLE9BQUEsQ0FBUSxZQUFSOztBQUNqQixLQUFBLEdBQWlCLE9BQUEsQ0FBUSxPQUFSOztBQUNqQixJQUFBLEdBQWlCLE9BQUEsQ0FBUSxNQUFSOztBQUNqQixPQUFBLEdBQWlCLE9BQUEsQ0FBUSxTQUFSOztBQUNqQixJQUFBLEdBQWlCLE9BQUEsQ0FBUSxNQUFSOztBQUNqQixjQUFBLEdBQWlCLE9BQUEsQ0FBUSxpQkFBUjs7QUFDakIsVUFBQSxHQUFpQixPQUFBLENBQVEsYUFBUjs7QUFDakIsUUFBQSxHQUFpQixPQUFBLENBQVEsV0FBUjs7QUFDakIsWUFBQSxHQUFpQixPQUFBLENBQVEsZUFBUjs7QUFFakIsR0FBQSxHQUFZLE9BQUEsQ0FBUSxXQUFSOztBQUVaLEdBQUEsR0FBWSxPQUFBLENBQUE7O0FBQ1osTUFBQSxHQUFZLElBQUksQ0FBQyxZQUFMLENBQWtCLEdBQWxCOztBQUNaLEVBQUEsR0FBWSxRQUFRLENBQUMsTUFBVCxDQUFnQixNQUFoQjs7QUFHWixPQUFBLEdBQVU7O0FBSVYsRUFBRSxDQUFDLEVBQUgsQ0FBTSxZQUFOLEVBQW9CLFNBQUMsTUFBRDtFQUVuQixPQUFPLENBQUMsSUFBUixDQUFhLE1BQWI7RUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLG9CQUFBLEdBQXFCLE9BQU8sQ0FBQyxNQUE3QixHQUFvQyxtQkFBN0M7U0FHQSxNQUFNLENBQUMsRUFBUCxDQUFVLFlBQVYsRUFBd0IsU0FBQTtJQUV2QixPQUFPLENBQUMsTUFBUixDQUFlLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE1BQWhCLENBQWYsRUFBd0MsQ0FBeEM7V0FDQSxHQUFHLENBQUMsSUFBSixDQUFTLHVCQUFBLEdBQXdCLE9BQU8sQ0FBQyxNQUFoQyxHQUF1QyxtQkFBaEQ7RUFIdUIsQ0FBeEI7QUFObUIsQ0FBcEI7O0FBWUEsR0FDQyxDQUFDLEdBREYsQ0FDTSxVQUFVLENBQUMsVUFBWCxDQUFzQjtFQUFBLFFBQUEsRUFBVSxJQUFWO0NBQXRCLENBRE4sQ0FFQyxDQUFDLEdBRkYsQ0FFTSxVQUFVLENBQUMsSUFBWCxDQUFBLENBRk4sQ0FHQyxDQUFDLEdBSEYsQ0FHTSxjQUFBLENBQUEsQ0FITixDQUlDLENBQUMsR0FKRixDQUlNLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBZSxJQUFJLENBQUMsT0FBTCxDQUFhLFNBQWIsRUFBd0IsV0FBeEIsQ0FBZixDQUpOOztBQU9BLEdBQ0MsQ0FBQyxHQURGLENBQ00sYUFETixFQUNxQixNQURyQixDQUVDLENBQUMsR0FGRixDQUVNLE9BRk4sRUFFZSxJQUFJLENBQUMsT0FBTCxDQUFhLFNBQWIsRUFBd0IsU0FBeEIsQ0FGZixDQUdDLENBQUMsR0FIRixDQUdNLGFBSE4sRUFHcUIsSUFIckI7O0FBTUEsR0FDQyxDQUFDLEdBREYsQ0FDTSxHQUROLEVBQ1csQ0FBQSxTQUFBLEtBQUE7U0FBQSxTQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsSUFBWDtJQUNULEdBQUcsQ0FBQyxJQUFKLENBQVMsT0FBTyxDQUFDLE1BQWpCO1dBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUywrQkFBVDtFQUZTO0FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURYOztBQU1BLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZDs7QUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLG1CQUFUIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgcmVxdWlyZWQgbW9kdWxlc1xuXyAgICAgICAgICAgICAgPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5hc3luYyAgICAgICAgICA9IHJlcXVpcmUgXCJhc3luY1wiXG5odHRwICAgICAgICAgICA9IHJlcXVpcmUgXCJodHRwXCJcbmV4cHJlc3MgICAgICAgID0gcmVxdWlyZSBcImV4cHJlc3NcIlxucGF0aCAgICAgICAgICAgPSByZXF1aXJlIFwicGF0aFwiXG5tZXRob2RPdmVycmlkZSA9IHJlcXVpcmUgXCJtZXRob2Qtb3ZlcnJpZGVcIlxuYm9keVBhcnNlciAgICAgPSByZXF1aXJlIFwiYm9keS1wYXJzZXJcIlxuc29ja2V0aW8gICAgICAgPSByZXF1aXJlIFwic29ja2V0LmlvXCJcbmVycm9ySGFuZGxlciAgID0gcmVxdWlyZSBcImVycm9yLWhhbmRsZXJcIlxuXG5sb2cgICAgICAgPSByZXF1aXJlIFwiLi9saWIvbG9nXCJcblxuYXBwICAgICAgID0gZXhwcmVzcygpXG5zZXJ2ZXIgICAgPSBodHRwLmNyZWF0ZVNlcnZlciBhcHBcbmlvICAgICAgICA9IHNvY2tldGlvLmxpc3RlbiBzZXJ2ZXJcblxuIyBjb2xsZWN0aW9uIG9mIGNsaWVudCBzb2NrZXRzXG5zb2NrZXRzID0gW11cblxuXG4jIHdlYnNvY2tldCBjb25uZWN0aW9uIGxvZ2ljXG5pby5vbiBcImNvbm5lY3Rpb25cIiwgKHNvY2tldCkgLT5cblx0IyBhZGQgc29ja2V0IHRvIGNsaWVudCBzb2NrZXRzXG5cdHNvY2tldHMucHVzaCBzb2NrZXRcblx0bG9nLmluZm8gXCJTb2NrZXQgY29ubmVjdGVkLCAje3NvY2tldHMubGVuZ3RofSBjbGllbnQocykgYWN0aXZlXCJcblx0XG5cdCMgZGlzY29ubmVjdCBsb2dpY1xuXHRzb2NrZXQub24gXCJkaXNjb25uZWN0XCIsIC0+XG5cdFx0IyByZW1vdmUgc29ja2V0IGZyb20gY2xpZW50IHNvY2tldHNcblx0XHRzb2NrZXRzLnNwbGljZSBzb2NrZXRzLmluZGV4T2Yoc29ja2V0KSwgMVxuXHRcdGxvZy5pbmZvIFwiU29ja2V0IGRpc2Nvbm5lY3RlZCwgI3tzb2NrZXRzLmxlbmd0aH0gY2xpZW50KHMpIGFjdGl2ZVwiXG5cbiMgZXhwcmVzcyBhcHBsaWNhdGlvbiBtaWRkbGV3YXJlXG5hcHBcblx0LnVzZSBib2R5UGFyc2VyLnVybGVuY29kZWQgZXh0ZW5kZWQ6IHRydWVcblx0LnVzZSBib2R5UGFyc2VyLmpzb24oKVxuXHQudXNlIG1ldGhvZE92ZXJyaWRlKClcblx0LnVzZSBleHByZXNzLnN0YXRpYyBwYXRoLnJlc29sdmUgX19kaXJuYW1lLCBcIi4uL2NsaWVudFwiXG5cbiMgZXhwcmVzcyBhcHBsaWNhdGlvbiBzZXR0aW5nc1xuYXBwXG5cdC5zZXQgXCJ2aWV3IGVuZ2luZVwiLCBcImphZGVcIlxuXHQuc2V0IFwidmlld3NcIiwgcGF0aC5yZXNvbHZlIF9fZGlybmFtZSwgXCIuL3ZpZXdzXCJcblx0LnNldCBcInRydXN0IHByb3h5XCIsIHRydWVcblxuIyBleHByZXNzIGFwcGxpY2F0aW9uIHJvdXRlc3NcbmFwcFxuXHQuZ2V0IFwiL1wiLCAocmVxLCByZXMsIG5leHQpID0+XG5cdFx0bG9nLmluZm8gc29ja2V0cy5sZW5ndGhcblx0XHRyZXMuc2VuZCBcIldlbGNvbWUgdG8gdGhlIGNvZmZlIHByb2plY3QhXCJcblxuIyBzdGFydCB0aGUgc2VydmVyXG5zZXJ2ZXIubGlzdGVuIDMwMDBcbmxvZy5pbmZvIFwiTGlzdGVuaW5nIG9uIDMwMDBcIlxuIl19
